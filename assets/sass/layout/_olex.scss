@charset 'UTF-8';
@use "sass:math";
@use "../global" as *;

/*! olex v3.0.0| MIT License | https://github.com/hilosiva/olexcss */

/* ============================================
  Olex - Ore no Flexible CSS Grid System
============================================ */

/*
 Settings
--------------------------------- */
// Grid Column
$column: 12;

$scroll-bar: 0;

// Gutter Size
$gutters: (
  xxsmall: 8,
  xsmall: 16,
  small: 24,
  medium: 30,
  large: 88,
  xlarge: 136,
  xxlarge: 160,
  xxxlarge: 260,
) !default;

// Breakpoints
// $breakpoints: (
//   min: 0,
//   xxs: 360px,
//   xs: 414px,
//   sm: 576px,
//   md: 768px,
//   lg: 992px,
//   xl: 1200px,
//   xxl: 1400px,
// ) !default;

:root {
  @each $size, $val in $gutters {
    --olex-space-#{$size}: #{$val};
  }
  --olex-scrollbar-width: #{$scroll-bar};
}

/*
  Base
--------------------------------- */
/*
  <div class="olex">
    <div class="olex__item">A</div>
    <div class="olex__item">B</div>
    <div class="olex__item">C</div>
  </div>
*/

.olex {
  display: flex;
  flex-wrap: wrap;
  margin: 0;
  padding: 0;

  &__item {
    box-sizing: border-box;
    display: flex;
    flex-direction: column;
    margin: 0;
  }
}

/*
  Direction
--------------------------------- */
/*
  <div class="olex" data-dir="xxs:reverse">
    <div class="olex__item">A</div>
    <div class="olex__item">B</div>
    <div class="olex__item">C</div>
  </div>
*/

.olex {
  @each $device, $breakpoint in $breakpoints {
    @include mq($device) {
      &[data-dir="#{$device}:normal"] {
        flex-direction: row;
      }
      &[data-dir="#{$device}:reverse"] {
        flex-direction: row-reverse;
      }
    }
  }
}

/*
  Alignment
--------------------------------- */
/*
  <div class="olex" data-align="xxs:center">
    <div class="olex__item">A</div>
    <div class="olex__item">B</div>
    <div class="olex__item" data-align="xxs:end middle">C</div>
  </div>
*/

.olex {
  @each $device, $breakpoint in $breakpoints {
    @include mq($device) {
      &[data-align~="#{$device}:start"] {
        justify-content: flex-start;
      }

      &[data-align~="#{$device}:center"] {
        justify-content: center;
      }

      &[data-align~="#{$device}:end"] {
        justify-content: flex-end;
      }

      &[data-align~="#{$device}:justify"] {
        justify-content: space-between;
      }

      &[data-align~="#{$device}:top"] {
        align-items: flex-start;
      }

      &[data-align~="#{$device}:middle"] {
        align-items: center;
      }

      &[data-align~="#{$device}:bottom"] {
        align-items: flex-end;
      }
    }
  }

  &__item {
    @each $device, $breakpoint in $breakpoints {
      @include mq($device) {
        &[data-align~="#{$device}:start"] {
          align-items: flex-start;
        }

        &[data-align~="#{$device}:center"] {
          align-items: center;
        }

        &[data-align~="#{$device}:end"] {
          align-items: flex-end;
        }

        &[data-align~="#{$device}:top"] {
          justify-content: flex-start;
        }

        &[data-align~="#{$device}:middle"] {
          justify-content: center;
        }

        &[data-align~="#{$device}:bottom"] {
          justify-content: flex-end;
        }
      }
    }
  }
}

/*
  Grid
--------------------------------- */
/*
  <div class="olex" data-gutter="xxs:medium">
    <div class="olex__item" data-cols="xxs:12 md:4 lg:6">A</div>
    <div class="olex__item" data-cols="xxs:6 md:4 lg3">B</div>
    <div class="olex__item" data-cols="xxs:6 md:4 lg3">C</div>
  </div>
*/
.olex {
  --gap: 0;
  $this: &;
  &[data-gutter] {
    width: auto;

    & > #{$this}__item {
      border: 0 solid transparent;
      background-clip: padding-box;
    }
  }

  @each $device, $breakpoint in $breakpoints {
    @media screen and (min-width: $breakpoint) {
      @each $size, $val in $gutters {
        $base: $breakpoint;

        @if $breakpoint < 1px {
          $base: 320px;
        }

        // Set Gap
        // $gap: calc(($val / $base * 100) / 2) * 1vw; // Vw
        // $gap: calc($val / 16px / 2) * 1rem; // Rem

        &[data-gutter~="#{$device}:#{$size}"] {
          --gap: calc(var(--olex-space-#{$size}) / 16 / 2 * 1rem);
          margin: calc(#{var(--gap)} * -1);

          & > #{$this}__item {
            border-width: var(--gap);
          }
        }
      }

      &__item {
        @for $i from 1 through $column {
          &[data-cols~="#{$device}:#{$i}"] {
            width: percentage(math.div($i, $column));
          }
        }

        &[data-cols~="#{$device}:five"] {
          width: 20%;
        }

        &[data-cols~="#{$device}:auto"] {
          width: auto;
        }

        @for $i from 0 through 3 {
          &[data-order~="#{$device}:#{$i}"] {
            order: $i;
          }
          &[data-grow~="#{$device}:#{$i}"] {
            flex-grow: $i;
          }
        }
      }
    }
  }
}

/*
  Over
--------------------------------- */
/*
  <div class="olex" data-gutter="xxs:medium" data-over="xxs:left">
    <div class="olex__item" data-cols="xxs:12 md:4 lg:6">A</div>
    <div class="olex__item" data-cols="xxs:6 md:4 lg3">B</div>
    <div class="olex__item" data-cols="xxs:6 md:4 lg3">C</div>
  </div>
*/
.olex {
  $this: &;

  &__item {
    @each $device, $breakpoint in $breakpoints {
      @media screen and (min-width: $breakpoint) {
        &[data-over~="#{$device}:left"] {
          margin-left: calc(50% - 50vw + calc(var(--olex-scrollbar-width) * 1px));
          flex-grow: 1;

          #{$this}[data-gutter] & {
            border-left-width: 0;
          }
        }
        &[data-over~="#{$device}:right"] {
          margin-right: calc(50% - 50vw + calc(var(--olex-scrollbar-width) * 1px));
          flex-grow: 1;

          #{$this}[data-gutter] & {
            border-right-width: 0;
          }
        }

        &[data-over~="#{$device}:clearLeft"] {
          margin-left: 0;

          #{$this}[data-gutter] & {
            border-left-width: var(--gap);
          }
        }
        &[data-over~="#{$device}:clearRight"] {
          margin-right: 0;
          #{$this}[data-gutter] & {
            border-right-width: var(--gap);
          }
        }

        &[data-over~="#{$device}:clearLeft"][data-over~="#{$device}:clearRight"] {
          flex-grow: 0;
        }
      }
    }
  }
}
